{"version":3,"file":"treetabledemo.js","sourceRoot":"","sources":["treetabledemo.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA+B,eAAe,CAAC,CAAA;AAC/C,4BAA0B,wBAAwB,CAAC,CAAA;AAMnD;IAkBI,uBAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAI,CAAC;IAEjD,gCAAQ,GAAR;QAAA,iBAMC;QALG,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,MAAM,GAAG,KAAK,EAAnB,CAAmB,CAAC,CAAC;QACpE,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,MAAM,GAAG,KAAK,EAAnB,CAAmB,CAAC,CAAC;QACpE,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,MAAM,GAAG,KAAK,EAAnB,CAAmB,CAAC,CAAC;QACpE,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,MAAM,GAAG,KAAK,EAAnB,CAAmB,CAAC,CAAC;QACpE,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,SAAS,GAAG,KAAK,EAAtB,CAAsB,CAAC,CAAC;IAC/E,CAAC;IAED,kCAAU,GAAV,UAAW,KAAK;QACZ,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAC,CAAC,CAAC;IAC/F,CAAC;IAED,oCAAY,GAAZ,UAAa,KAAK;QACd,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAC,CAAC,CAAC;IACjG,CAAC;IAED,kCAAU,GAAV,UAAW,KAAK;QACZ,EAAE,CAAA,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACZ,2HAA2H;YAC3H,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,KAAK,EAA3B,CAA2B,CAAC,CAAC;QACpF,CAAC;IACL,CAAC;IA9CL;QAAC,gBAAS,CAAC;YACP,WAAW,EAAE,4CAA4C;SAC5D,CAAC;;qBAAA;IA6CF,oBAAC;AAAD,CAAC,AA5CD,IA4CC;AA5CY,qBAAa,gBA4CzB,CAAA","sourcesContent":["import {Component,OnInit} from '@angular/core';\r\nimport {NodeService} from '../service/nodeservice';\r\nimport {Message,TreeNode} from '../../../components/common/api';\r\n\r\n@Component({\r\n    templateUrl: 'showcase/demo/treetable/treetabledemo.html'\r\n})\r\nexport class TreeTableDemo implements OnInit {\r\n    \r\n    msgs: Message[];\r\n    \r\n    files1: TreeNode[];\r\n    \r\n    files2: TreeNode[];\r\n    \r\n    files3: TreeNode[];\r\n    \r\n    files4: TreeNode[];\r\n    \r\n    lazyFiles: TreeNode[];\r\n        \r\n    selectedFile: TreeNode;\r\n    \r\n    selectedFiles: TreeNode[];\r\n        \r\n    constructor(private nodeService: NodeService) { }\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files3 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files4 = files);\r\n        this.nodeService.getLazyFilesystem().then(files => this.lazyFiles = files);\r\n    }\r\n    \r\n    nodeSelect(event) {\r\n        this.msgs = [];\r\n        this.msgs.push({severity: 'info', summary: 'Node Selected', detail: event.node.data.name});\r\n    }\r\n    \r\n    nodeUnselect(event) {\r\n        this.msgs = [];\r\n        this.msgs.push({severity: 'info', summary: 'Node Unselected', detail: event.node.data.name});\r\n    }\r\n    \r\n    nodeExpand(event) {\r\n        if(event.node) {\r\n            //in a real application, make a call to a remote url to load children of the current node and add the new nodes as children\r\n            this.nodeService.getLazyFilesystem().then(nodes => event.node.children = nodes);\r\n        }\r\n    }\r\n}"]}