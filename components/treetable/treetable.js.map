{"version":3,"file":"treetable.js","sourceRoot":"","sources":["treetable.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,ElementRef,ContentChild,IterableDiffers,ContentChildren,QueryList,Inject,forwardRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TreeNode} from '../common/api';\r\nimport {Header,Footer,Column} from '../common/shared';\r\nimport {SharedModule} from '../common/shared';\r\nimport {DomHandler} from '../dom/domhandler';\r\n\r\n@Component({\r\n    selector: '[pTreeRow]',\r\n    template: `\r\n        <div class=\"ui-treetable-row\" [ngClass]=\"{'ui-state-hover':hover&&treeTable.selectionMode,'ui-state-highlight':isSelected()}\">\r\n            <td *ngFor=\"let col of treeTable.columns; let i=index\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\"\r\n                (mouseenter)=\"hover=true\" (mouseleave)=\"hover=false\" (click)=\"onRowClick($event)\">\r\n                <span *ngIf=\"i==0\" class=\"ui-treetable-toggler fa fa-fw ui-c\" [ngClass]=\"{'fa-caret-down':node.expanded,'fa-caret-right':!node.expanded}\"\r\n                    [ngStyle]=\"{'margin-left':level*16 + 'px','visibility': isLeaf() ? 'hidden' : 'visible'}\"\r\n                    (click)=\"toggle($event)\"></span>\r\n                <span *ngIf=\"!col.template\">{{resolveFieldData(node.data,col.field)}}</span>\r\n                <p-columnBodyTemplateLoader [column]=\"col\" [rowData]=\"node\" *ngIf=\"col.template\"></p-columnBodyTemplateLoader>\r\n            </td>\r\n        </div>\r\n        <div *ngIf=\"node.children && node.expanded\" class=\"ui-treetable-row\" style=\"display:table-row\">\r\n            <td [attr.colspan]=\"treeTable.columns.length\" class=\"ui-treetable-child-table-container\">\r\n                <table>\r\n                    <tbody pTreeRow *ngFor=\"let childNode of node.children\" [node]=\"childNode\" [level]=\"level+1\"></tbody>\r\n                </table>\r\n            </td>\r\n        </div>\r\n    `\r\n})\r\nexport class UITreeRow {\r\n\r\n    @Input() node: TreeNode;\r\n    \r\n    @Input() level: number = 0;\r\n            \r\n    public hover: boolean;\r\n    \r\n    constructor(@Inject(forwardRef(() => TreeTable)) public treeTable:TreeTable) {}\r\n    \r\n    toggle(event: Event) {\r\n        if(this.node.expanded)\r\n            this.treeTable.onNodeCollapse.emit({originalEvent: event, node: this.node});\r\n        else\r\n            this.treeTable.onNodeExpand.emit({originalEvent: event, node: this.node});\r\n            \r\n        this.node.expanded = !this.node.expanded;\r\n    }\r\n    \r\n    isLeaf() {\r\n        return this.node.leaf == false ? false : !(this.node.children&&this.node.children.length);\r\n    }\r\n    \r\n    isSelected() {\r\n        return this.treeTable.isSelected(this.node);\r\n    }\r\n    \r\n    onRowClick(event: MouseEvent) {\r\n        this.treeTable.onRowClick(event, this.node);\r\n    }\r\n    \r\n    resolveFieldData(data: any, field: string): any {\r\n        if(data && field) {\r\n            if(field.indexOf('.') == -1) {\r\n                return data[field];\r\n            }\r\n            else {\r\n                let fields: string[] = field.split('.');\r\n                let value = data;\r\n                for(var i = 0, len = fields.length; i < len; ++i) {\r\n                    value = value[fields[i]];\r\n                }\r\n                return value;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTable',\r\n    template: `\r\n        <div [ngClass]=\"'ui-treetable ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\">\r\n            <div class=\"ui-treetable-header ui-widget-header\" *ngIf=\"header\">\r\n                <ng-content select=\"header\"></ng-content>\r\n            </div>\r\n            <div class=\"ui-treetable-tablewrapper\">\r\n                <table class=\"ui-widget-content\">\r\n                    <thead>\r\n                        <tr class=\"ui-state-default\">\r\n                            <th #headerCell *ngFor=\"let col of columns\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\" \r\n                                [ngClass]=\"'ui-state-default ui-unselectable-text'\">\r\n                                <span class=\"ui-column-title\" *ngIf=\"!col.headerTemplate\">{{col.header}}</span>\r\n                                <span class=\"ui-column-title\" *ngIf=\"col.headerTemplate\">\r\n                                    <p-columnHeaderTemplateLoader [column]=\"col\"></p-columnHeaderTemplateLoader>\r\n                                </span>\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tfoot *ngIf=\"hasFooter()\">\r\n                        <tr>\r\n                            <td *ngFor=\"let col of columns\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\" [ngClass]=\"{'ui-state-default':true}\">\r\n                                <span class=\"ui-column-footer\" *ngIf=\"!col.footerTemplate\">{{col.footer}}</span>\r\n                                <span class=\"ui-column-footer\" *ngIf=\"col.footerTemplate\">\r\n                                    <p-columnFooterTemplateLoader [column]=\"col\"></p-columnFooterTemplateLoader>\r\n                                </span>\r\n                            </td>\r\n                        </tr>\r\n                    </tfoot>\r\n                    <tbody pTreeRow *ngFor=\"let node of value\" [node]=\"node\" [level]=\"0\"></tbody>\r\n                </table>\r\n            </div>\r\n            <div class=\"ui-treetable-footer ui-widget-header\" *ngIf=\"footer\">\r\n                <ng-content select=\"footer\"></ng-content>\r\n            </div>\r\n        </div>\r\n    `\r\n})\r\nexport class TreeTable {\r\n\r\n    @Input() value: TreeNode[];\r\n        \r\n    @Input() selectionMode: string;\r\n    \r\n    @Input() selection: any;\r\n    \r\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Input() style: any;\r\n        \r\n    @Input() styleClass: string;\r\n    \r\n    @ContentChild(Header) header: Header;\r\n\r\n    @ContentChild(Footer) footer: Footer;\r\n    \r\n    @ContentChildren(Column) columns: QueryList<Column>;\r\n        \r\n    onRowClick(event: MouseEvent, node: TreeNode) {\r\n        let eventTarget = (<Element> event.target);\r\n        if(eventTarget.className && eventTarget.className.indexOf('ui-treetable-toggler') === 0) {\r\n            return;\r\n        }\r\n        else {\r\n            let metaKey = (event.metaKey||event.ctrlKey);\r\n            let index = this.findIndexInSelection(node);\r\n            let selected = (index >= 0);\r\n                   \r\n            if(selected && metaKey) {\r\n                if(this.isSingleSelectionMode()) {\r\n                    this.selectionChange.emit(null);\r\n                }\r\n                else {\r\n                    this.selection.splice(index,1);\r\n                    this.selectionChange.emit(this.selection);\r\n                }\r\n\r\n                this.onNodeUnselect.emit({originalEvent: event, node: node});\r\n            }\r\n            else {\r\n                if(this.isSingleSelectionMode()) {\r\n                    this.selectionChange.emit(node);\r\n                }\r\n                else if(this.isMultipleSelectionMode()) {\r\n                    this.selection = (!metaKey) ? [] : this.selection||[];\r\n                    this.selection.push(node);\r\n                    this.selectionChange.emit(this.selection);\r\n                }\r\n\r\n                this.onNodeSelect.emit({originalEvent: event, node: node});\r\n            }\r\n        }\r\n    }\r\n    \r\n    findIndexInSelection(node: TreeNode) {\r\n        let index: number = -1;\r\n\r\n        if(this.selectionMode && this.selection) {\r\n            if(this.isSingleSelectionMode()) {\r\n                index = (this.selection == node) ? 0 : - 1;\r\n            }\r\n            else if(this.isMultipleSelectionMode()) {\r\n                for(let i = 0; i  < this.selection.length; i++) {\r\n                    if(this.selection[i] == node) {\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n    \r\n    isSelected(node: TreeNode) {\r\n        return this.findIndexInSelection(node) != -1;         \r\n    }\r\n    \r\n    isSingleSelectionMode() {\r\n        return this.selectionMode && this.selectionMode == 'single';\r\n    }\r\n    \r\n    isMultipleSelectionMode() {\r\n        return this.selectionMode && this.selectionMode == 'multiple';\r\n    }\r\n    \r\n    hasFooter() {\r\n        if(this.columns) {\r\n            let columnsArr = this.columns.toArray();\r\n            for(let i = 0; i < columnsArr.length; i++) {\r\n                if(columnsArr[i].footer) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,SharedModule],\r\n    exports: [TreeTable,SharedModule],\r\n    declarations: [TreeTable,UITreeRow]\r\n})\r\nexport class TreeTableModule { }"]}