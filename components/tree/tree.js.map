{"version":3,"file":"tree.js","sourceRoot":"","sources":["tree.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,AfterContentInit,Output,EventEmitter,OnInit,ViewContainerRef,ContentChildren,QueryList,TemplateRef,Inject,forwardRef,Host} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TreeNode} from '../common/api';\r\nimport {SharedModule} from '../common/shared';\r\nimport {PrimeTemplate} from '../common/shared';\r\n\r\n@Component({\r\n    selector: 'p-treeNodeTemplateLoader',\r\n    template: ``\r\n})\r\nexport class TreeNodeTemplateLoader implements OnInit {\r\n        \r\n    @Input() node: any;\r\n    \r\n    @Input() template: TemplateRef<any>;\r\n        \r\n    constructor(public viewContainer: ViewContainerRef) {}\r\n    \r\n    ngOnInit() {\r\n        let view = this.viewContainer.createEmbeddedView(this.template, {\r\n            '\\$implicit': this.node\r\n        });\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeNode',\r\n    template: `\r\n        <template [ngIf]=\"node\">\r\n            <li class=\"ui-treenode\" *ngIf=\"!tree.horizontal\">\r\n                <div class=\"ui-treenode-content\"\r\n                    (mouseenter)=\"hover=true\" (mouseleave)=\"hover=false\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\">\r\n                    <span class=\"ui-tree-toggler fa fa-fw\" [ngClass]=\"{'fa-caret-right':!node.expanded,'fa-caret-down':node.expanded}\" *ngIf=\"!isLeaf()\"\r\n                            (click)=\"toggle($event)\"></span\r\n                    ><span class=\"ui-treenode-leaf-icon\" *ngIf=\"isLeaf()\"></span\r\n                    ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\r\n                    ><span class=\"ui-treenode-label ui-corner-all\" \r\n                        [ngClass]=\"{'ui-state-hover':hover && tree.selectionMode,'ui-state-highlight':isSelected()}\">\r\n                            <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\r\n                            <span *ngIf=\"tree.getTemplateForNode(node)\">\r\n                                <p-treeNodeTemplateLoader [node]=\"node\" [template]=\"tree.getTemplateForNode(node)\"></p-treeNodeTemplateLoader>\r\n                            </span>\r\n                    </span>\r\n                </div>\r\n                <ul class=\"ui-treenode-children\" style=\"display: none;\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'block' : 'none'\">\r\n                    <p-treeNode *ngFor=\"let childNode of node.children\" [node]=\"childNode\"></p-treeNode>\r\n                </ul>\r\n            </li>\r\n            <table *ngIf=\"tree.horizontal\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td class=\"ui-treenode-connector\" *ngIf=\"!root\">\r\n                            <table class=\"ui-treenode-connector-table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!firstChild}\"></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!lastChild}\"></td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </td>\r\n                        <td class=\"ui-treenode\" [ngClass]=\"{'ui-treenode-collapsed':!node.expanded}\">\r\n                            <div class=\"ui-treenode-content ui-state-default ui-corner-all\" \r\n                                [ngClass]=\"{'ui-state-hover':hover && tree.selectionMode,'ui-state-highlight':isSelected()}\"\r\n                                (mouseenter)=\"hover=true\" (mouseleave)=\"hover=false\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\">\r\n                                <span class=\"ui-tree-toggler fa fa-fw\" [ngClass]=\"{'fa-plus':!node.expanded,'fa-minus':node.expanded}\" *ngIf=\"!isLeaf()\"\r\n                                        (click)=\"toggle($event)\"></span\r\n                                ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\r\n                                ><span class=\"ui-treenode-label ui-corner-all\">\r\n                                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\r\n                                        <span *ngIf=\"tree.getTemplateForNode(node)\">\r\n                                            <p-treeNodeTemplateLoader [node]=\"node\" [template]=\"tree.getTemplateForNode(node)\"></p-treeNodeTemplateLoader>\r\n                                        </span>\r\n                                </span>\r\n                            </div>\r\n                        </td>\r\n                        <td class=\"ui-treenode-children-container\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'table-cell' : 'none'\">\r\n                            <div class=\"ui-treenode-children\">\r\n                                <p-treeNode *ngFor=\"let childNode of node.children;let firstChild=first;let lastChild=last;\" [node]=\"childNode\" \r\n                                        [firstChild]=\"firstChild\" [lastChild]=\"lastChild\"></p-treeNode>\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </template>\r\n    `\r\n})\r\nexport class UITreeNode {\r\n\r\n    static ICON_CLASS: string = 'ui-treenode-icon fa fa-fw';\r\n\r\n    @Input() node: TreeNode;\r\n    \r\n    @Input() root: boolean;\r\n    \r\n    @Input() firstChild: boolean;\r\n    \r\n    @Input() lastChild: boolean;\r\n        \r\n    hover: boolean = false;\r\n        \r\n    constructor(@Inject(forwardRef(() => Tree)) public tree:Tree) {}\r\n        \r\n    getIcon() {\r\n        let icon: string;\r\n        \r\n        if(this.node.icon)\r\n            icon = this.node.icon;\r\n        else\r\n            icon = this.node.expanded ? this.node.expandedIcon : this.node.collapsedIcon;\r\n        \r\n        return UITreeNode.ICON_CLASS + ' ' + icon;\r\n    }\r\n    \r\n    isLeaf() {\r\n        return this.node.leaf == false ? false : !(this.node.children&&this.node.children.length);\r\n    }\r\n    \r\n    toggle(event: Event) {\r\n        if(this.node.expanded)\r\n            this.tree.onNodeCollapse.emit({originalEvent: event, node: this.node});\r\n        else\r\n            this.tree.onNodeExpand.emit({originalEvent: event, node: this.node});\r\n\r\n        this.node.expanded = !this.node.expanded\r\n    }\r\n    \r\n    onNodeClick(event: MouseEvent) {\r\n        this.tree.onNodeClick(event, this.node);\r\n    }\r\n    \r\n    onNodeRightClick(event: MouseEvent) {\r\n        this.tree.onNodeRightClick(event, this.node);\r\n    }\r\n    \r\n    isSelected() {\r\n        return this.tree.isSelected(this.node);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-tree',\r\n    template: `\r\n        <div [ngClass]=\"{'ui-tree ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode}\" [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"!horizontal\">\r\n            <ul class=\"ui-tree-container\">\r\n                <p-treeNode *ngFor=\"let node of value\" [node]=\"node\"></p-treeNode>\r\n            </ul>\r\n        </div>\r\n        <div [ngClass]=\"{'ui-tree ui-tree-horizontal ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode}\"  [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"horizontal\">\r\n            <table *ngIf=\"value&&value[0]\">\r\n                <p-treeNode [node]=\"value[0]\" [root]=\"true\"></p-treeNode>\r\n            </table>\r\n        </div>\r\n    `\r\n})\r\nexport class Tree implements AfterContentInit {\r\n\r\n    @Input() value: TreeNode[];\r\n        \r\n    @Input() selectionMode: string;\r\n    \r\n    @Input() selection: any;\r\n    \r\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onNodeContextMenuSelect: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Input() style: any;\r\n        \r\n    @Input() styleClass: string;\r\n    \r\n    @Input() contextMenu: any;\r\n    \r\n    @Input() layout: string = 'vertical';\r\n    \r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n    \r\n    public templateMap: any;\r\n    \r\n    get horizontal(): boolean {\r\n        return this.layout == 'horizontal';\r\n    }\r\n    \r\n    ngAfterContentInit() {\r\n        if(this.templates.length) {\r\n            this.templateMap = {};\r\n        }\r\n        \r\n        this.templates.forEach((item) => {\r\n            this.templateMap[item.type] = item.template;\r\n        });\r\n    }\r\n         \r\n    onNodeClick(event: MouseEvent, node: TreeNode) {\r\n        let eventTarget = (<Element> event.target);\r\n        \r\n        if(eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {\r\n            return;\r\n        }\r\n        else {\r\n            let metaKey = (event.metaKey||event.ctrlKey);\r\n            let index = this.findIndexInSelection(node);\r\n            let selected = (index >= 0);\r\n                   \r\n            if(selected && metaKey) {\r\n                if(this.isSingleSelectionMode()) {\r\n                    this.selectionChange.emit(null);\r\n                }\r\n                else {\r\n                    this.selection.splice(index,1);\r\n                    this.selectionChange.emit(this.selection);\r\n                }\r\n\r\n                this.onNodeUnselect.emit({originalEvent: event, node: node});\r\n            }\r\n            else {\r\n                if(this.isSingleSelectionMode()) {\r\n                    this.selectionChange.emit(node);\r\n                }\r\n                else if(this.isMultipleSelectionMode()) {\r\n                    this.selection = (!metaKey) ? [] : this.selection||[];\r\n                    this.selection.push(node);\r\n                    this.selectionChange.emit(this.selection);\r\n                }\r\n\r\n                this.onNodeSelect.emit({originalEvent: event, node: node});\r\n            }\r\n        }\r\n    }\r\n    \r\n    onNodeRightClick(event: MouseEvent, node: TreeNode) {\r\n        if(this.contextMenu) {\r\n            let eventTarget = (<Element> event.target);\r\n            \r\n            if(eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {\r\n                return;\r\n            }\r\n            else {\r\n                let index = this.findIndexInSelection(node);\r\n                let selected = (index >= 0);\r\n                \r\n                if(!selected) {\r\n                    if(this.isSingleSelectionMode())\r\n                        this.selectionChange.emit(node);\r\n                    else\r\n                        this.selectionChange.emit([node]);\r\n                }\r\n                   \r\n                this.contextMenu.show(event);\r\n                this.onNodeContextMenuSelect.emit({originalEvent: event, node: node});\r\n            }\r\n        }\r\n    }\r\n    \r\n    findIndexInSelection(node: TreeNode) {\r\n        let index: number = -1;\r\n\r\n        if(this.selectionMode && this.selection) {\r\n            if(this.isSingleSelectionMode()) {\r\n                index = (this.selection == node) ? 0 : - 1;\r\n            }\r\n            else if(this.isMultipleSelectionMode()) {\r\n                for(let i = 0; i  < this.selection.length; i++) {\r\n                    if(this.selection[i] == node) {\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n    \r\n    isSelected(node: TreeNode) {\r\n        return this.findIndexInSelection(node) != -1;         \r\n    }\r\n    \r\n    isSingleSelectionMode() {\r\n        return this.selectionMode && this.selectionMode == 'single';\r\n    }\r\n    \r\n    isMultipleSelectionMode() {\r\n        return this.selectionMode && this.selectionMode == 'multiple';\r\n    }\r\n\r\n    expandToNode(node: TreeNode): void {\r\n        const pathToNode: TreeNode[] = this.findPathToNode(node);\r\n        if(pathToNode) {\r\n            pathToNode.forEach( node => node.expanded=true );\r\n        }\r\n    }\r\n\r\n    findPathToNode(node: TreeNode): TreeNode[] {\r\n        return Tree.findPathToNodeRecursive(node, this.value);\r\n    }\r\n\r\n    private static findPathToNodeRecursive(searchingFor: TreeNode, searchingIn: TreeNode[]): TreeNode[] {\r\n\r\n        if(!searchingIn || searchingIn.length == 0){\r\n            return undefined;\r\n        }\r\n\r\n        for(let i=0; i<searchingIn.length; i++){\r\n            if(searchingFor == searchingIn[i]){\r\n                return [ searchingIn[i] ];\r\n            }\r\n            const path: TreeNode[] = Tree.findPathToNodeRecursive( searchingFor, searchingIn[i].children );\r\n            if(path) {\r\n                path.unshift(searchingIn[i]);\r\n                return path;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getTemplateForNode(node: TreeNode): TemplateRef<any> {\r\n        if(this.templateMap)\r\n            return node.type ? this.templateMap[node.type] : this.templateMap['default'];\r\n        else\r\n            return null;\r\n    }\r\n}\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [Tree,SharedModule],\r\n    declarations: [Tree,UITreeNode,TreeNodeTemplateLoader]\r\n})\r\nexport class TreeModule { }\r\n"]}